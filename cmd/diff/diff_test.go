package diff

import (
	"os"
	"path/filepath"
	"testing"

	"github.com/stretchr/testify/assert"
)

func TestDiffSingleAction_MissingFile(t *testing.T) {
	// Test that diff detects missing files as having a diff
	// This requires creating a temp action.yml file
	
	tmpDir := t.TempDir()
	actionPath := filepath.Join(tmpDir, "action.yml")
	readmePath := filepath.Join(tmpDir, "README.md")
	
	// Create action.yml
	actionContent := `name: Test Action
description: Test Description`
	err := os.WriteFile(actionPath, []byte(actionContent), 0644)
	assert.NoError(t, err)
	
	// Don't create README.md
	
	// act
	hasDiff, err := diffSingleAction(actionPath, readmePath)
	
	// assert
	assert.NoError(t, err)
	assert.True(t, hasDiff, "Missing README should show as having diff")
	
	// Verify README was not created
	_, err = os.Stat(readmePath)
	assert.True(t, os.IsNotExist(err), "diff should not create README file")
}

func TestDiffSingleAction_ExistingFileUpToDate(t *testing.T) {
	// Test that diff correctly identifies up-to-date files
	
	tmpDir := t.TempDir()
	actionPath := filepath.Join(tmpDir, "action.yml")
	readmePath := filepath.Join(tmpDir, "README.md")
	
	// Create action.yml
	actionContent := `name: Test Action
description: Test Description`
	err := os.WriteFile(actionPath, []byte(actionContent), 0644)
	assert.NoError(t, err)
	
	// Create an up-to-date README.md
	readmeContent := `<!-- Generated by https://github.com/reakaleek/gh-action-readme -->
# <!--name-->Test Action<!--/name-->
<!--description-->
Test Description
<!--/description-->

## Inputs
<!--inputs-->
| Name | Description | Required | Default |
|------|-------------|----------|---------|
<!--/inputs-->

## Outputs
<!--outputs-->
| Name | Description |
|------|-------------|
<!--/outputs-->

## Usage
<!--usage action="your/action" version="v1"-->
` + "```yaml\n" + `on: push
steps:
  - uses: your/action@v1
` + "```\n" + `<!--/usage-->
`
	err = os.WriteFile(readmePath, []byte(readmeContent), 0644)
	assert.NoError(t, err)
	
	// act
	hasDiff, err := diffSingleAction(actionPath, readmePath)
	
	// assert
	assert.NoError(t, err)
	assert.False(t, hasDiff, "Up-to-date README should not show diff")
}

func TestDiffSingleAction_ExistingFileOutOfDate(t *testing.T) {
	// Test that diff correctly identifies out-of-date files
	
	tmpDir := t.TempDir()
	actionPath := filepath.Join(tmpDir, "action.yml")
	readmePath := filepath.Join(tmpDir, "README.md")
	
	// Create action.yml
	actionContent := `name: New Name
description: New Description`
	err := os.WriteFile(actionPath, []byte(actionContent), 0644)
	assert.NoError(t, err)
	
	// Create an outdated README.md
	readmeContent := `# <!--name-->Old Name<!--/name-->
<!--description-->
Old Description
<!--/description-->`
	err = os.WriteFile(readmePath, []byte(readmeContent), 0644)
	assert.NoError(t, err)
	
	// act
	hasDiff, err := diffSingleAction(actionPath, readmePath)
	
	// assert
	assert.NoError(t, err)
	assert.True(t, hasDiff, "Out-of-date README should show diff")
}

func TestDiffSingleActionWithOutput_MissingFile(t *testing.T) {
	// Test the recursive mode function
	
	tmpDir := t.TempDir()
	actionPath := filepath.Join(tmpDir, "action.yml")
	readmePath := filepath.Join(tmpDir, "README.md")
	
	// Create action.yml
	actionContent := `name: Test Action
description: Test Description`
	err := os.WriteFile(actionPath, []byte(actionContent), 0644)
	assert.NoError(t, err)
	
	// Don't create README.md
	
	// act
	hasDiff, fileExists, err := diffSingleActionWithOutput(actionPath, readmePath)
	
	// assert
	assert.NoError(t, err)
	assert.True(t, hasDiff, "Missing README should show as having diff")
	assert.False(t, fileExists, "File should be marked as non-existent")
	
	// Verify README was not created
	_, err = os.Stat(readmePath)
	assert.True(t, os.IsNotExist(err), "diff should not create README file")
}
